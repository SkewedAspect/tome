//----------------------------------------------------------------------------------------------------------------------
// Helpful Utilities (Stolen liberally from Twitter's Bootstrap)
//----------------------------------------------------------------------------------------------------------------------

$grid-breakpoints: (
	xs: 0,
	sm: 576px,
	md: 768px,
	lg: 992px,
	xl: 1200px
);

//----------------------------------------------------------------------------------------------------------------------
// Mixins / Functions
//----------------------------------------------------------------------------------------------------------------------

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 544px, md: 768px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
	$n: index($breakpoint-names, $name);
	@return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 544px, md: 768px))
//    544px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
	$min: map-get($breakpoints, $name);
	@return if($min != 0, $min, null);
}

// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.1.
//
//    >> breakpoint-max(sm, (xs: 0, sm: 544px, md: 768px))
//    767px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
	$next: breakpoint-next($name, $breakpoints);
	@return if($next, breakpoint-min($next, $breakpoints) - 1px, null);
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
	$min: breakpoint-min($name, $breakpoints);
	@if $min {
		@media (min-width: $min) {
			@content;
		}
	} @else {
		@content;
	}
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
	$max: breakpoint-max($name, $breakpoints);
	@if $max {
		@media (max-width: $max) {
			@content;
		}
	} @else {
		@content;
	}
}

//----------------------------------------------------------------------------------------------------------------------
// Visibility utilities
//----------------------------------------------------------------------------------------------------------------------

.invisible {
	visibility: hidden !important;
}

@each $bp in map-keys($grid-breakpoints) {
	.hidden-#{$bp}-up {
		@include media-breakpoint-up($bp) {
			display: none !important;
		}
	}
	.hidden-#{$bp}-down {
		@include media-breakpoint-down($bp) {
			display: none !important;
		}
	}
}

//----------------------------------------------------------------------------------------------------------------------
// Print utilities
//----------------------------------------------------------------------------------------------------------------------

.visible-print-block {
	display: none !important;

	@media print {
		display: block !important;
	}
}
.visible-print-inline {
	display: none !important;

	@media print {
		display: inline !important;
	}
}
.visible-print-inline-block {
	display: none !important;

	@media print {
		display: inline-block !important;
	}
}

.hidden-print {
	@media print {
		display: none !important;
	}
}

//----------------------------------------------------------------------------------------------------------------------
